// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoBooth.DAL;

namespace PhotoBooth.DAL.Migrations
{
    [DbContext(typeof(PhotoBoothContext))]
    partial class PhotoBoothContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CustomerAddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.ItemPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CurrentlyAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ItemPackages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89a0b45a-5946-4e9b-90ef-c47b2f8b85cc"),
                            CurrentlyAvailable = true,
                            Name = "Balik L"
                        },
                        new
                        {
                            Id = new Guid("07c50b28-53f4-4a95-9203-9e71b37a8f9a"),
                            CurrentlyAvailable = true,
                            Name = "Balik M"
                        });
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.ItemPackageProduct", b =>
                {
                    b.Property<Guid>("ItemPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemPackageId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ItemPackageProduct");

                    b.HasData(
                        new
                        {
                            ItemPackageId = new Guid("89a0b45a-5946-4e9b-90ef-c47b2f8b85cc"),
                            ProductId = new Guid("42bc60eb-baf0-4fb7-9172-126d229db4da")
                        },
                        new
                        {
                            ItemPackageId = new Guid("89a0b45a-5946-4e9b-90ef-c47b2f8b85cc"),
                            ProductId = new Guid("5ac9f8e2-30bb-4030-8ace-5b15cdb7cbce")
                        });
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.ItemPackageRentalItem", b =>
                {
                    b.Property<Guid>("ItemPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RentalItemType")
                        .HasColumnType("int");

                    b.HasKey("ItemPackageId", "RentalItemType");

                    b.ToTable("ItemPackageRentalItem");

                    b.HasData(
                        new
                        {
                            ItemPackageId = new Guid("89a0b45a-5946-4e9b-90ef-c47b2f8b85cc"),
                            RentalItemType = 1
                        },
                        new
                        {
                            ItemPackageId = new Guid("89a0b45a-5946-4e9b-90ef-c47b2f8b85cc"),
                            RentalItemType = 0
                        },
                        new
                        {
                            ItemPackageId = new Guid("89a0b45a-5946-4e9b-90ef-c47b2f8b85cc"),
                            RentalItemType = 3
                        },
                        new
                        {
                            ItemPackageId = new Guid("89a0b45a-5946-4e9b-90ef-c47b2f8b85cc"),
                            RentalItemType = 2
                        },
                        new
                        {
                            ItemPackageId = new Guid("07c50b28-53f4-4a95-9203-9e71b37a8f9a"),
                            RentalItemType = 0
                        },
                        new
                        {
                            ItemPackageId = new Guid("07c50b28-53f4-4a95-9203-9e71b37a8f9a"),
                            RentalItemType = 3
                        });
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BannerUrl")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("LocationAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RentalSince")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RentalTill")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationAddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.OrderProduct", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.OrderRentalItem", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("OrderRentalItem");
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AmountLeft")
                        .HasColumnType("bigint");

                    b.Property<string>("DescriptionHtml")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42bc60eb-baf0-4fb7-9172-126d229db4da"),
                            AmountLeft = 20L,
                            DescriptionHtml = "Usb so zhotovenymi fotkami",
                            Name = "USB kluc",
                            PictureUrl = "https://photos.smileshoot.sk/usb.jpg",
                            Price = 5.0
                        },
                        new
                        {
                            Id = new Guid("5ac9f8e2-30bb-4030-8ace-5b15cdb7cbce"),
                            AmountLeft = 10L,
                            DescriptionHtml = "Fotokniha s drevenou prednou stranou + gravirovanie",
                            Name = "Fotokniha",
                            PictureUrl = "https://photos.smileshoot.sk/fotokiha.jpg",
                            Price = 10.0
                        });
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.RentalItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DescriptionHtml")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<double>("PricePerHour")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RentalItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d06696b-4dff-4faf-a8a8-f5cc100d5a71"),
                            DescriptionHtml = "Unikátna, skvele vyzerajúca fotobúdka s neobmedzenou možnosťou tlače v krásnom retro dizajne.",
                            Name = "Retro fotobudka",
                            PictureUrl = "https://photos.smileshoot.sk/photobooth.jpg",
                            PricePerHour = 80.0,
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("aac48b3f-5cdb-49e2-92e0-24864c1a5c65"),
                            DescriptionHtml = "Najlepsi zamestnanec roka",
                            Name = "Dominik",
                            PricePerHour = 10.0,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("4996090c-da51-4435-8e15-88a87767bb05"),
                            DescriptionHtml = "2. najlepsi zamestnanec roka",
                            Name = "Milos",
                            PricePerHour = 10.0,
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("31545f44-9a49-4df2-993b-5b420754ea7c"),
                            DescriptionHtml = "Zlate pozadie s gulickami",
                            Name = "Pozadie A",
                            PictureUrl = "https://photos.smileshoot.sk/pozadie-A.jpg",
                            PricePerHour = 10.0,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("4e33b967-31c0-49c3-896c-2ab2ea257a7b"),
                            DescriptionHtml = "Kvetinove pozadie",
                            Name = "Pozadie B",
                            PictureUrl = "https://photos.smileshoot.sk/pozadie-B.jpg",
                            PricePerHour = 10.0,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("ca8209a8-e046-4509-ade0-aef8359baae9"),
                            DescriptionHtml = "Vintage pozadie",
                            Name = "Pozadie C",
                            PictureUrl = "https://photos.smileshoot.sk/pozadie-C.jpg",
                            PricePerHour = 10.0,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("c1f18413-3665-4f00-87a7-f1f39393e395"),
                            DescriptionHtml = "Vianocne pozadie s vlockami",
                            Name = "Pozadie D",
                            PictureUrl = "https://photos.smileshoot.sk/pozadie-D.jpg",
                            PricePerHour = 10.0,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("0d4c06ca-f53e-4d8f-8fa4-4bb42f88821b"),
                            DescriptionHtml = "Svieze modre pozadie",
                            Name = "Pozadie E",
                            PictureUrl = "https://photos.smileshoot.sk/pozadie-E.jpg",
                            PricePerHour = 10.0,
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("414fbd63-a7ee-480e-b2bc-2ea3c5d9e41c"),
                            DescriptionHtml = "Santa claus ciapky, vianocne okuliare...",
                            Name = "Vianocne rekvizity",
                            PictureUrl = "https://photos.smileshoot.sk/props1.jpg",
                            PricePerHour = 10.0,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("57efe2f1-a48e-48a5-9287-042a16ca3cdf"),
                            DescriptionHtml = "Tabulky 'nabuduce sa vydavam ja', 'parketovy lev', parochne, klobuky...",
                            Name = "Svadobne rekvizity",
                            PictureUrl = "https://photos.smileshoot.sk/props2.jpg",
                            PricePerHour = 10.0,
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("889084ca-450a-425e-8323-32bdae035862"),
                            DescriptionHtml = "Smiesne parochne, okuliare...",
                            Name = "Party mix rekvizity",
                            PictureUrl = "https://photos.smileshoot.sk/props3.jpg",
                            PricePerHour = 10.0,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PhotoBooth.DAL.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PhotoBooth.DAL.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoBooth.DAL.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PhotoBooth.DAL.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.ApplicationUser", b =>
                {
                    b.HasOne("PhotoBooth.DAL.Entity.Address", "CustomerAddress")
                        .WithMany()
                        .HasForeignKey("CustomerAddressId");
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.ItemPackageProduct", b =>
                {
                    b.HasOne("PhotoBooth.DAL.Entity.ItemPackage", "ItemPackage")
                        .WithMany("Products")
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoBooth.DAL.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.ItemPackageRentalItem", b =>
                {
                    b.HasOne("PhotoBooth.DAL.Entity.ItemPackage", "ItemPackage")
                        .WithMany("RentalItems")
                        .HasForeignKey("ItemPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.Order", b =>
                {
                    b.HasOne("PhotoBooth.DAL.Entity.ApplicationUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("PhotoBooth.DAL.Entity.Address", "LocationAddress")
                        .WithMany()
                        .HasForeignKey("LocationAddressId");
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.OrderProduct", b =>
                {
                    b.HasOne("PhotoBooth.DAL.Entity.Product", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoBooth.DAL.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhotoBooth.DAL.Entity.OrderRentalItem", b =>
                {
                    b.HasOne("PhotoBooth.DAL.Entity.RentalItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhotoBooth.DAL.Entity.Order", "Order")
                        .WithMany("RentalItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
